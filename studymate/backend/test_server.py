#!/usr/bin/env python3
"""
Simple test server for StudyMate backend
This version doesn't require external services (PostgreSQL, Redis, MinIO)
"""

import asyncio
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import json

app = FastAPI(title="StudyMate Test Server", version="1.0.0")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Simple in-memory storage for testing
documents = []
chunks = []
chats = []

class SearchRequest(BaseModel):
    query: str
    k: Optional[int] = 5

class SearchHit(BaseModel):
    chunk_id: str
    document_id: str
    filename: str
    page_start: int
    page_end: int
    text: str
    score: float

class SearchResponse(BaseModel):
    hits: List[SearchHit]

class ChatRequest(BaseModel):
    query: str
    chat_id: Optional[str] = None
    top_k: Optional[int] = 5

class ChatResponse(BaseModel):
    response: str
    citations: List[dict]

@app.get("/")
async def root():
    return {"message": "StudyMate Test Server is running!", "status": "ok"}

@app.get("/health")
async def health():
    return {"status": "healthy", "services": {"database": "mock", "vector_store": "mock"}}

@app.post("/search", response_model=SearchResponse)
async def search(request: SearchRequest):
    """Mock search endpoint"""
    # Return some mock results
    hits = [
        SearchHit(
            chunk_id="chunk_1",
            document_id="doc_1",
            filename="sample.pdf",
            page_start=1,
            page_end=2,
            text="This is a sample text chunk that matches your query.",
            score=0.95
        ),
        SearchHit(
            chunk_id="chunk_2",
            document_id="doc_1",
            filename="sample.pdf",
            page_start=3,
            page_end=4,
            text="Another relevant text chunk with useful information.",
            score=0.87
        )
    ]
    return SearchResponse(hits=hits[:request.k])

@app.post("/chat")
async def chat(request: ChatRequest):
    """Mock chat endpoint"""
    # Simulate a response with citations
    response = f"Based on the available documents, here's what I found about '{request.query}':\n\nThis is a mock response that would normally be generated by the LLM using the retrieved context."
    
    citations = [
        {
            "document_id": "doc_1",
            "chunk_id": "chunk_1",
            "filename": "sample.pdf",
            "page_start": 1,
            "page_end": 2,
            "score": 0.95
        }
    ]
    
    return ChatResponse(response=response, citations=citations)

@app.get("/search/stats")
async def get_search_stats():
    """Mock search statistics"""
    return {
        "total_documents": len(documents),
        "total_chunks": len(chunks),
        "total_chats": len(chats)
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting StudyMate Test Server...")
    print("üìñ API Documentation: http://localhost:8000/docs")
    print("üîç Health Check: http://localhost:8000/health")
    print("üí° This is a test server - no external services required!")
    uvicorn.run("test_server:app", host="0.0.0.0", port=8000, reload=True)
